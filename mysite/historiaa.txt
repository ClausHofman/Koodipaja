python manage.py makemigrations polls
python manage.py sqlmigrate polls 0001
python manage.py check

python manage.py shell
from polls.models import Choice, Question;Question.objects.all();from django.utils import timezone;q = Question(question_text="What's new?", pub_date=timezone.now());q.save();q.id;q.question_text;q.pub_date;q.question_text = "What's up?";q.save();Question.objects.all()

-------------------------------------

python manage.py shell

from polls.models import Choice, Question

# Make sure our __str__() addition worked.
Question.objects.all()

# Django provides a rich database lookup API that's entirely driven by
# keyword arguments.
Question.objects.filter(id=1)
Question.objects.filter(question_text__startswith='What')

# Get the question that was published this year.
from django.utils import timezone
current_year = timezone.now().year
Question.objects.get(pub_date__year=current_year)

# Request an ID that doesn't exist, this will raise an exception.
# Question.objects.get(id=2)

# Lookup by a primary key is the most common case, so Django provides a
# shortcut for primary-key exact lookups.
# The following is identical to Question.objects.get(id=1).
Question.objects.get(pk=1)

# Make sure our custom method worked.
q = Question.objects.get(pk=1)
q.was_published_recently()

# Give the Question a couple of Choices. The create call constructs a new
# Choice object, does the INSERT statement, adds the choice to the set
# of available choices and returns the new Choice object. Django creates
# a set to hold the "other side" of a ForeignKey relation
# (e.g. a question's choice) which can be accessed via the API.
q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
# q.choice_set.all()

# Create three choices.
q.choice_set.create(choice_text='Not much', votes=0)
q.choice_set.create(choice_text='The sky', votes=0)
c = q.choice_set.create(choice_text='Just hacking again', votes=0)

# Choice objects have API access to their related Question objects.
c.question

# And vice versa: Question objects get access to Choice objects.
q.choice_set.all()
q.choice_set.count()

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
Choice.objects.filter(question__pub_date__year=current_year)
# Let's delete one of the choices. Use delete() for that.
c = q.choice_set.filter(choice_text__startswith='Just hacking')
c.delete()

---------------------------------

https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#anatomy_of_an_html_document

Method-calling happens in the {% for %} loop: question.choice_set.all is interpreted as the Python code question.choice_set.all(), which returns an iterable of Choice objects and is suitable for use in the {% for %} tag.
https://docs.djangoproject.com/en/4.1/topics/templates/

Whenever you create a form that alters data server-side, use method="post". This tip isn’t specific to Django; it’s good web development practice in general.

You should always return an HttpResponseRedirect after successfully dealing with POST data. This tip isn’t specific to Django; it’s good web development practice in general.

https://docs.djangoproject.com/en/4.1/ref/request-response/

Avoiding race conditions
https://docs.djangoproject.com/en/4.1/ref/models/expressions/#avoiding-race-conditions-using-f

----------------------
By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html. In our case, it would use the template "polls/question_detail.html". 
In previous parts of the tutorial, the templates have been provided with a context that contains the question and latest_question_list context variables. For DetailView the question variable is provided automatically – since we’re using a Django model (Question), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is question_list. To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead. As an alternative approach, you could change your templates to match the new default context variables – but it’s a lot easier to tell Django to use the variable you want.
https://docs.djangoproject.com/en/4.1/topics/class-based-views/

----------------------
Tests don’t just identify problems, they prevent them
That other developers want to see tests in your software before they take it seriously is yet another reason for you to start writing tests.
Tests help teams work together
Some programmers follow a discipline called “test-driven development”; they actually write their tests before they write their code. 

python manage.py shell

import datetime
from django.utils import timezone
from polls.models import Question
# create a Question instance with pub_date 30 days in the future
future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))
# was it published recently?
future_question.was_published_recently()

Since things in the future are not ‘recent’, this is clearly wrong.
Create a test to expose the bug

python manage.py test polls

----------------------
Django provides a test Client to simulate a user interacting with the code at the view level. We can use it in tests.py or even in the shell.

python manage.py shell
from django.test.utils import setup_test_environment
setup_test_environment()

from django.test import Client
# create an instance of the client for our use
client = Client()
# get a response from '/'
response = client.get('/')
# we should expect a 404 from that address; if you instead see an
# "Invalid HTTP_HOST header" error and a 400 response, you probably
# omitted the setup_test_environment() call described earlier.
response.status_code
# on the other hand we should expect to find something at '/polls/'
# we'll use 'reverse()' rather than a hardcoded URL
from django.urls import reverse
response = client.get(reverse('polls:index'))
response.status_code
response.content
response.context['latest_question_list']


As long as your tests are sensibly arranged, they won’t become unmanageable. Good rules-of-thumb include having:

a separate TestClass for each model or view
a separate test method for each set of conditions you want to test
test method names that describe their function

https://docs.djangoproject.com/en/4.1/topics/testing/overview/

------------------------------
The {% static %} template tag is not available for use in static files which aren’t generated by Django, like your stylesheet. You should always use relative paths to link your static files between each other, because then you can change STATIC_URL (used by the static template tag to generate its URLs) without having to modify a bunch of paths in your static files as well.
https://docs.djangoproject.com/en/4.1/howto/static-files/
https://docs.djangoproject.com/en/4.1/ref/contrib/staticfiles/
https://docs.djangoproject.com/en/4.1/howto/static-files/deployment/

------------------------------

Reusable apps
A package can be imported with import foo.bar or from foo import bar. For a directory (like polls) to form a package, it must contain a special file __init__.py, even if this file is empty.

The polls directory could now be copied into a new Django project and immediately reused. It’s not quite ready to be published though. For that, we need to package the app to make it easy for others to install.

pip install setuptools
First, create a parent directory for polls, outside of your Django project. Call this directory django-polls.
moved polls directory to django-polls
followed the django-documentation https://docs.djangoproject.com/en/4.1/intro/reusable-apps/
step 8. ran command python setup.py sdist
(more docs https://packaging.python.org/en/latest/tutorials/packaging-projects/)

python -m pip install --user django-polls/dist/django-polls-0.1.tar.gz
python -m pip uninstall django-polls

-----------------------------
https://docs.djangoproject.com/en/4.1/topics/
https://docs.djangoproject.com/en/4.1/howto/
https://docs.djangoproject.com/en/4.1/ref/